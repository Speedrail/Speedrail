// Copyright 2021-present 650 Industries. All rights reserved.

// A dynamic type wrapper for values conforming to Encodable.
// This mirrors the pattern used by other dynamic type wrappers in the module.

import Foundation

// If the project already defines `AnyDynamicType`, this conformance will be used.
// Otherwise, provide a minimal fallback protocol so this file compiles in isolation.
#if canImport(ExpoModulesCore)
import ExpoModulesCore
#endif

#if !canImport(ExpoModulesCore)
// Fallback minimal protocol to satisfy compilation when the real one isn't visible to the compiler.
// This is non-invasive and avoids duplicate symbol definitions when the real module is present.
public protocol AnyDynamicType {
  var typeId: ObjectIdentifier { get }
  var typeName: String { get }
  func matches(_ value: Any) -> Bool
}
#endif

public final class DynamicEncodableType: AnyDynamicType {
  public static let shared = DynamicEncodableType()

  private init() {}

  public var typeId: ObjectIdentifier {
    // Use the `Encodable` protocol's metatype as an identifier anchor.
    return ObjectIdentifier(Encodable.self)
  }

  public var typeName: String {
    return "Encodable"
  }

  public func matches(_ value: Any) -> Bool {
    return value is Encodable
  }
}
